// General configuration used in all profiles
manifest {
  name = "dessimozlab/FastOMA"
  description = """FastOMA computes Hierarchical Orthologous Groups from proteomes."""
  author = "Sina Majidian, Adrian Altenhoff"
  homePage = "https://omabrowser.org"
  mainScript = "FastOMA.nf"
  nextflowVersion = ">=22.10.4"
}

params {
  container_name = "dessimozlab/fastoma"
  container_version = "latest"
  omamer_db = "https://omabrowser.org/All/Primates-v2.0.0.h5" // todo Luca
  debug_enabled = false
  help = false
  report = false

  output_folder = "Output"
  statsdir = "${params.output_folder}/stats"

  // Max resource options
  // Defaults only, expecting to be overwritten
  max_memory                 = '128.GB'
  max_cpus                   = 24
  max_time                   = '120.h'
}

// Profiles configure nextflow depending on the environment (local, docker, singularity)
profiles {

  docker {
    process {
      container = "$params.container_name:$params.container_version"
    }
    docker.enabled = true
  }

  singularity {
    process {
      container = "$params.container_name:$params.container_version"
    }
    singularity.enabled = true
    singularity.autoMounts = true
  }

  standard {
    process.executor = 'local'
  }

  conda {
    process.conda = "environment-conda.yml"
    conda.enabled = true
  }

  slurm_singularity {
    process {
      container = "$params.container_name:$params.container_version"
      executor = "slurm"
      time = 4.h
      memory = 20.GB
    }
    singularity.enabled = true
    singularity.autoMounts = true
  }

  slurm_conda {
    process {
      conda = "environment-conda.yml"
      executor = "slurm"
      time = 4.h
      memory = 20.GB
    }
    conda.enabled = true
  }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = params.report
  file = "${params.statsdir}/timeline_${trace_timestamp}.html"
}
report {
  enabled = params.report
  file = "${params.statsdir}/report_${trace_timestamp}.html"
}
trace {
    enabled = params.report
    file    = "${params.statsdir}/trace_${trace_timestamp}.txt"
}
dag {
    enabled = params.report
    file    = "${params.statsdir}/pipeline_dag_${trace_timestamp}.html"
}

includeConfig "conf/base.config"

// function to check maximum resources
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
